"""
Agendador de sincroniza√ß√£o autom√°tica com Facebook
Executa sincroniza√ß√£o di√°ria para evitar rate limits
"""

import asyncio
import logging
from datetime import datetime, date, timedelta, time
from typing import Optional
import schedule
from app.services.facebook_sync import facebook_sync
from app.models.facebook_models import sync_jobs_collection

logger = logging.getLogger(__name__)

class FacebookSyncScheduler:
    def __init__(self):
        self.is_running = False
        self.last_sync = None
        self.sync_hour = 3  # Hor√°rio da sincroniza√ß√£o (3:00 AM)

    async def daily_sync(self):
        """Executa sincroniza√ß√£o di√°ria completa"""
        try:
            logger.info("üöÄ Iniciando sincroniza√ß√£o di√°ria autom√°tica...")

            # Verificar √∫ltima sincroniza√ß√£o
            last_job = await sync_jobs_collection.find_one(
                {"status": "completed", "job_type": "full_sync"},
                sort=[("completed_at", -1)]
            )

            if last_job:
                last_sync_time = last_job.get("completed_at")
                if last_sync_time:
                    hours_since_last = (datetime.utcnow() - last_sync_time).total_seconds() / 3600
                    if hours_since_last < 20:  # Evita sincroniza√ß√£o muito frequente
                        logger.info(f"‚è∞ √öltima sincroniza√ß√£o h√° {hours_since_last:.1f} horas. Pulando...")
                        return

            # Executar sincroniza√ß√£o completa (√∫ltimos 30 dias)
            success = await facebook_sync.full_sync(days_back=30)

            if success:
                self.last_sync = datetime.utcnow()
                logger.info(f"‚úÖ Sincroniza√ß√£o di√°ria completa com sucesso √†s {self.last_sync}")

                # Registrar job de sucesso
                await sync_jobs_collection.insert_one({
                    "job_type": "full_sync",
                    "account_id": "act_1051414772388438",
                    "status": "completed",
                    "started_at": self.last_sync - timedelta(minutes=5),  # Estimativa
                    "completed_at": self.last_sync,
                    "days_synced": 30,
                    "error_message": None
                })
            else:
                logger.error("‚ùå Falha na sincroniza√ß√£o di√°ria")

                # Registrar job de falha
                await sync_jobs_collection.insert_one({
                    "job_type": "full_sync",
                    "account_id": "act_1051414772388438",
                    "status": "failed",
                    "started_at": datetime.utcnow() - timedelta(minutes=5),
                    "completed_at": datetime.utcnow(),
                    "error_message": "Sincroniza√ß√£o falhou - verificar logs"
                })

        except Exception as e:
            logger.error(f"‚ùå Erro na sincroniza√ß√£o di√°ria: {e}")

    async def incremental_sync(self):
        """Sincroniza√ß√£o incremental (apenas hoje e ontem)"""
        try:
            logger.info("üîÑ Iniciando sincroniza√ß√£o incremental...")

            # Sincronizar apenas √∫ltimos 2 dias (mais r√°pido)
            end_date = date.today()
            start_date = end_date - timedelta(days=1)

            success = await facebook_sync.sync_metrics_for_date_range(start_date, end_date)

            if success:
                logger.info("‚úÖ Sincroniza√ß√£o incremental completa")
            else:
                logger.warning("‚ö†Ô∏è Problemas na sincroniza√ß√£o incremental")

        except Exception as e:
            logger.error(f"‚ùå Erro na sincroniza√ß√£o incremental: {e}")

    async def start_scheduler(self):
        """Inicia o agendador de sincroniza√ß√£o"""
        self.is_running = True
        logger.info(f"‚è∞ Agendador iniciado - Sincroniza√ß√£o di√°ria √†s {self.sync_hour}:00")

        while self.is_running:
            try:
                now = datetime.now()

                # Verificar se √© hora da sincroniza√ß√£o di√°ria
                if now.hour == self.sync_hour and now.minute == 0:
                    await self.daily_sync()
                    # Aguardar 1 hora para evitar m√∫ltiplas execu√ß√µes
                    await asyncio.sleep(3600)

                # Sincroniza√ß√£o incremental a cada 4 horas (exceto na hora da sync completa)
                elif now.hour % 4 == 0 and now.minute == 30 and now.hour != self.sync_hour:
                    await self.incremental_sync()
                    await asyncio.sleep(60)

                # Verificar a cada minuto
                await asyncio.sleep(60)

            except Exception as e:
                logger.error(f"‚ùå Erro no agendador: {e}")
                await asyncio.sleep(300)  # Aguardar 5 minutos em caso de erro

    def stop_scheduler(self):
        """Para o agendador"""
        self.is_running = False
        logger.info("‚èπÔ∏è Agendador parado")

    async def force_sync(self, days_back: int = 30):
        """For√ßa uma sincroniza√ß√£o manual imediata"""
        logger.info(f"üîÑ Sincroniza√ß√£o manual for√ßada - {days_back} dias")
        return await facebook_sync.full_sync(days_back=days_back)

    async def get_sync_status(self):
        """Retorna status da √∫ltima sincroniza√ß√£o"""
        last_job = await sync_jobs_collection.find_one(
            {"status": "completed", "job_type": "full_sync"},
            sort=[("completed_at", -1)]
        )

        if last_job:
            return {
                "last_sync": last_job.get("completed_at"),
                "days_synced": last_job.get("days_synced", 0),
                "next_sync": datetime.combine(
                    date.today() + timedelta(days=1),
                    time(self.sync_hour, 0)
                ),
                "status": "active" if self.is_running else "stopped"
            }

        return {
            "last_sync": None,
            "message": "Nenhuma sincroniza√ß√£o encontrada",
            "next_sync": datetime.combine(
                date.today() + timedelta(days=1),
                time(self.sync_hour, 0)
            ),
            "status": "active" if self.is_running else "stopped"
        }

# Inst√¢ncia global do agendador
sync_scheduler = FacebookSyncScheduler()

# Fun√ß√£o para iniciar o agendador em background
async def start_background_scheduler():
    """Inicia o agendador em background"""
    asyncio.create_task(sync_scheduler.start_scheduler())
    logger.info("‚úÖ Agendador de sincroniza√ß√£o iniciado em background")